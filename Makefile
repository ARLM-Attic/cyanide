#  greenpois0n - Makefile
#  (c) 2010 Chronic-Dev Team
#

###############
# HOW TO USE
#
# Building for a specific device
# $ make devices="iPod3,1"
#
# Building for a specific firmware version
# $ make firmwares="7D11"
#
# Building for a specific target
# $ make targets="iBoot"
#
# These options can be combined:
# $ make devices="iPod3,1 iPod2,1" firmwares="7D11" targets="iBoot"
#
# If a given item is not specified, it defaults to "everything available."
#
# Compilation can be made more verbose (output compiler and linker commandlines) by supplying "messages=yes", as follows:
# $ make messages=yes

ifneq ($(DEVICE),)
-include bundles/$(DEVICE)/device.mk
endif

# Defaults for the devices, firmwares and targets variables
# devices is generated by finding every device in bundles/
# firmwares is generated from the list of directories in a given device folder
# targets is generated from the list of directories in a given firmware folder
devices ?= $(patsubst bundles/%/,%,$(wildcard bundles/*/))
firmwares ?= $(patsubst bundles/$(DEVICE)/%/,%,$(wildcard bundles/$(DEVICE)/*/))
targets ?= $(patsubst bundles/$(DEVICE)/$(FIRMWARE)/%/,%,$(wildcard bundles/$(DEVICE)/$(FIRMWARE)/*/))


# Output directory and input files.
# the input file list is automatically generated as src/*.S and src/*.c.
OUTPUT_DIR = bin/$(DEVICE)/$(FIRMWARE)
INPUT_FILES = $(wildcard src/*.S)
INPUT_FILES += $(wildcard src/*.c)

# Automatically generate the list of object files to link by transforming the list of input files
# Transformation: remove src/, replace with outputdir/target_, and add .o
OBJ_FILES = $(patsubst src/%,$(OUTPUT_DIR)/objects/$(TARGET)_%.o,$(INPUT_FILES))

# Cross-compilation options. Compiler, linker, flags.
ARM_PREFIX ?= arm-elf-
ARM_CC := $(ARM_PREFIX)gcc
ARM_AS := $(ARM_PREFIX)as
ARM_LD := $(ARM_PREFIX)ld
ARM_OBJCOPY := $(ARM_PREFIX)objcopy
SELF = $(shell echo "$(TARGET)" | tr a-z A-Z)
TARGET_CFLAGS = -I./includes -I./includes/hardware -I./bundles/$(DEVICE) -I./bundles/$(DEVICE)/$(FIRMWARE) -I./bundles/$(DEVICE)/$(FIRMWARE)/$(TARGET) -D$(SELF) -fPIC -mthumb-interwork -ffixed-r12 -nostdlib
TARGET_LDFLAGS = -lc -lgcc

all:
	@for i in $(devices); do $(MAKE) $(MAKEFLAG) _device DEVICE="$$i"; done

clean:
	@rm -rf bin

.PHONY: _device _firmware _target Makefile
.SUFFIXES:
.SUFFIXES: .c .S

# all, _device, and _firmware are recursive rules that act over devices, firmwares and targets, respectively.
# When you run 'make', the 'all' rule is run, which runs _device for each device.
# _device runes _firmware for each firmware.
# _firmware runs _target for each target in that firmware.
_device::
	@for i in $(firmwares); do $(MAKE) $(PRINT_DIR_FLAG) --no-keep-going _firmware DEVICE="$(DEVICE)" FIRMWARE="$$i" || exit 1; done
_firmware::
	@for i in $(targets); do echo Building $(DEVICE) $(FIRMWARE) $$i...; $(MAKE) $(PRINT_DIR_FLAG) --no-keep-going _target DEVICE="$(DEVICE)" FIRMWARE="$(FIRMWARE)" TARGET="$$i" || exit 1; done
_target:: $(OUTPUT_DIR) $(OUTPUT_DIR)/$(TARGET)

ifneq ($(TARGET),)
# Pre-create the output directory.
$(OUTPUT_DIR):
	@mkdir -p $@
	@mkdir -p $@/objects

# The following few rules are for intermediates-
# a target depends on target.elf, which depends on the object files.
# The object files are resolved via these rules.
$(OUTPUT_DIR)/objects/$(TARGET)_%.S.o: src/%.S
	$(ECHO_COMPILING)$(ARM_CC) $(TARGET_CFLAGS) $(CFLAGS) -c -o $@ $<$(ECHO_END)
$(OUTPUT_DIR)/objects/$(TARGET)_%.c.o: src/%.c
	$(ECHO_COMPILING)$(ARM_CC) $(TARGET_CFLAGS) $(CFLAGS) -c -o $@ $<$(ECHO_END)

# target.elf, the intermediate that is the result of linking all the object files
$(OUTPUT_DIR)/objects/$(TARGET).elf: $(OBJ_FILES)
	$(ECHO_LINKING)$(ARM_CC) $(TARGET_CFLAGS) $(TARGET_LDFLAGS) $(LDFLAGS) -o $@ -Ttext=$(TARGET_ADDRESS) $^$(ECHO_END)

# target, strips (objcopy as binary) target.elf into the final target binary.
$(OUTPUT_DIR)/$(TARGET): $(OUTPUT_DIR)/objects/$(TARGET).elf
	$(ECHO_NOTHING)$(ARM_OBJCOPY) -O binary $< $@$(ECHO_END)
endif


# Variables for supporting verbose mode!
ifneq ($(messages),yes)
ECHO_COMPILING=@(echo "  Compiling $@...";
ECHO_LINKING=@(echo "  Linking $@...";
ECHO_NOTHING=@(
ECHO_END=)
PRINT_DIR_FLAG=--no-print-directory
else
ECHO_COMPILING=
ECHO_LINKING=
ECHO_NOTHING=
ECHO_END=
PRINT_DIR_FLAG=
endif
